---
# bootstrap.yml
# this playbook makes sure all targets get the ansible user and can be sshed into
# ansible-playbook site.yml --limit bootstrap --tags=bootstrap --skip-tags=always --ask-become-pass 
# 
#

#   - name: install updates (CentOS)
#     tags: always
#     dnf:
#       update_only: yes
#       update_cache: yes
#     when: ansible_distribution == "CentOS"

# - name: "debug facts"
#   tags: openresolv
#   debug: var=ansible_facts
  
- name: install basic packages
  tags: basic_pkg
  package:
    name: "{{ item }}"
    state: latest
  with_items:
    - network-manager
  #when: ansible_distribution in ["Ubuntu","Debian"] and ansible_distribution_version == "20.04"
  #when: no

- name: make sure nmcli will be able to manage the ethernet interface
  tags: nmcli_conf
  lineinfile:
    dest: /etc/NetworkManager/NetworkManager.conf
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    insertafter: "[ifupdown]"
    state: "{{ item.state }}"
    create: yes
  loop:
    - { regexp: '^managed=', line: 'managed=true', state: 'present' }


- name: remove these 2 packages interfering with network-manager on raspbian
  tags: openresolv
  package:
    name: "{{ item }}"
    state: absent
  with_items:
    - openresolv
    - dhcpcd5
  #when: ansible_distribution in ["Ubuntu","Debian"] and ansible_distribution_version == "20.04"
  #when: ansible_facts["nodename"] == "raspberry"
  when: ansible_facts["lsb"]["id"] == "Raspbian"


- name: Ensure group "ansible" exists
  tags: debug90
  ansible.builtin.group:
    name: ansible
    state: present

- name: create ansible user
  tags: debug90
  user:
    name: ansible
    groups: ansible
    shell: /bin/bash
    state: present

- name: add ssh key for ansible
  authorized_key: user=ansible key="{{ item }}" state=present
  with_items:
  - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPplB13Opukct+t9O1nbRskrsFSnHPIktMYLuDjilXSV toto@local
  - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJEa4zZ/C4s4rNNWk6raYFpLH3XVKh393wNX1iWTCcNG toto240325@gmail.com

- name: add sudoers file for ansible
  copy:
    src: sudoer_ansible
    dest: /etc/sudoers.d/ansible
    owner: root
    group: root
    mode: '0440'

- name: Set a hostname {{ newHostname }}
  tags: hostname
  ansible.builtin.hostname:
    name: "{{ newHostname }}"

- name: add hostname in /etc/hosts
  tags: debug_hosts
  lineinfile:
    path: "/etc/hosts"
    state: present
    regexp: "^{{ newEthIP }}"
    line: "{{ newEthIP }} {{ newHostname }}"


- name: Country Wifi
  shell: iw reg set BE

- name: Unblock Wifi
  tags: debugrf
  shell: rfkill unblock all
  #when: ansible_facts["nodename"] == "raspberry"
  when: ansible_facts["lsb"]["id"] == "Raspbian"

- name: enable ssh on raspberry
  service:
    name: sshd
    state: started
    enabled: yes
  #when: ansible_facts["nodename"] != "raspberry"
  when: ansible_facts["lsb"]["id"] != "Raspbian"

- name: "check if service dhcpd is present or not"
  tags: debug_dhcpd3
  shell: "systemctl status dhcpd 2>&1 | grep 'could not be found'"
  register: dhcpd_output

# - debug: var=dhcpd_output
#   tags: check_dhcpd_status

- name: disable service dhcpcd (to avoid interference with network-manager static addresses)
  tags: debug_dhcpd3
  ansible.builtin.service:
    name: dhcpcd
    enabled: no
    state: stopped
  when: dhcpd_output.stdout != "Unit dhcpd.service could not be found."

- name: "Add an Ethernet connection with static IP configuration for {{ mainEthDev }} on {{ newEthIP }}"
  tags: my-eth0
  community.general.nmcli:
    conn_name: my-eth0
    ifname: "{{ mainEthDev }}"
    type: ethernet
    ip4: "{{ newEthIP }}/24"
    gw4: 192.168.0.1
    dns4:
    - 8.8.4.4
    - 1.1.1.1
    autoconnect: true
    state: present

- name: check if wlan0 exists
  tags: wlan0
  shell: "ip a | grep {{ mainWifiDev }}"
  register: wlan0_output
  failed_when: wlan0_output.rc == 2  # grep returns 0 if kw found, 1 if not found, 2 if other error

# - debug: var=wlan0_output
#   tags: debug_wlan0
  
- name: "Add a wifi connections to {{ mainWifiDev }} with static IP configuration on VOO-953522"
  tags: wlan0
  community.general.nmcli:
    conn_name: "{{ item.conn_name }}"
    ifname: "{{ item.ifname }}"
    ip4: "{{ item.ip }}/24"
    type: wifi
    ssid: VOO-953522
    wifi_sec:
      key-mgmt: wpa-psk
      psk: "{{ vault_VOO953522_pw }}"
    autoconnect: true
    state: present
    gw4: 192.168.0.1
    dns4:
    - 8.8.4.4
    - 1.1.1.1
  with_items:
  - { conn_name: VOO-953522-wlan0, ifname: "{{ mainWifiDev }}", ip: "{{ newWlan0IP }}" }
  when: wlan0_output.rc == 0


- name: "Add a wifi connections to {{ mainWifiDev }} with static IP configuration on linksysed"
  tags: wlan0
  community.general.nmcli:
    conn_name: "{{ item.conn_name }}"
    ifname: "{{ item.ifname }}"
    ip4: "{{ item.ip }}/24"
    type: wifi
    ssid: linksysed
    wifi_sec:
      key-mgmt: wpa-psk
      psk: "{{ vault_linksysed_pw }}"
    autoconnect: true
    state: present
    gw4: 192.168.0.1
    dns4:
    - 8.8.4.4
    - 1.1.1.1
  with_items:
  - { conn_name: linksysed-wlan0, ifname: "{{ mainWifiDev }}", ip: "{{ newWlan0IP }}" }
  when: wlan0_output.rc == 0


- name: check if wlan1 exists
  tags: wlan1
  shell: "ip a | grep wlan1"
  register: wlan1_output
  failed_when: wlan1_output.rc == 2  # grep returns 0 if kw found, 1 if not found, 2 if other error

# - debug: var=wlan1_output
#   tags: debug_wlan1
  
- name: "Add a wifi connections to wlan1 with static IP configuration on VOO-953522"
  tags: wlan1
  community.general.nmcli:
    conn_name: "{{ item.conn_name }}"
    ifname: "{{ item.ifname }}"
    ip4: "{{ item.ip }}/24"
    type: wifi
    ssid: VOO-953522
    wifi_sec:
      key-mgmt: wpa-psk
      psk: "{{ vault_VOO953522_pw }}"
    autoconnect: true
    state: present
    gw4: 192.168.0.1
    dns4:
    - 8.8.4.4
    - 1.1.1.1
  with_items:
  - { conn_name: VOO-953522-wlan1, ifname: wlan1, ip: "{{ newWlan1IP }}" }
  when: wlan1_output.rc == 0


- name: "Add a wifi connections to wlan1 with static IP configuration on linksysed"
  tags: wlan1
  community.general.nmcli:
    conn_name: "{{ item.conn_name }}"
    ifname: "{{ item.ifname }}"
    ip4: "{{ item.ip }}/24"
    type: wifi
    ssid: linksysed
    wifi_sec:
      key-mgmt: wpa-psk
      psk: "{{ vault_linksysed_pw }}"
    autoconnect: true
    state: present
    gw4: 192.168.0.1
    dns4:
    - 8.8.4.4
    - 1.1.1.1
  with_items:
  - { conn_name: linksysed-wlan1, ifname: wlan1, ip: "{{ newWlan1IP }}" }
  when: wlan1_output.rc == 0

- name: Remove an erroneously created connection
  tags: debug19
  community.general.nmcli:
    conn_name: linksysed
    state: absent
